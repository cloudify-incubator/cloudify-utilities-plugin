tosca_definitions_version: cloudify_dsl_1_0

imports:

    - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/3.2.1-build/resources/rest-service/cloudify/types/types.yaml
    - http://s3.amazonaws.com/vcloud-score/cloudify-fabric-plugin/1.2/plugin.yaml
    - https://raw.githubusercontent.com/cloudify-examples/cloudify-proxy-plugin/master/plugin.yaml
    - types/agentless.yaml

inputs:

    nodejs_host_deployment_id:
      type: string

    mongodb_application_deployment_id:
      type: string


node_types:

    fabric_env:
      derived_from: cloudify.nodes.Root
      properties:
          env: {}

node_templates:

    nodejs_host_deployment_proxy:
      type: cloudify.nodes.DeploymentProxy
      properties:
        deployment_id: { get_input: nodejs_host_deployment_id }
        inherit_outputs:
          - 'nodejs_public_ip'
          - 'nodejs_ssh_translated_port'
          - 'common_public_key_user'
          - 'common_public_key'
          - 'common_private_key'
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            deployment_id: { get_input: nodejs_host_deployment_id }
        start:
          inputs:
            deployment_id: { get_input: nodejs_host_deployment_id }
        stop:
          inputs:
            deployment_id: { get_input: nodejs_host_deployment_id }

    mongodb_application_deployment_proxy:
        type: cloudify.nodes.DeploymentProxy
        properties:
          inherit_outputs:
            - 'mongodb_internal_ip'
        cloudify.interfaces.lifecycle:
          create:
            inputs:
              deployment_id: { get_input: mongodb_application_deployment_id }
          start:
            inputs:
              deployment_id: { get_input: mongodb_application_deployment_id }
          stop:
            inputs:
              deployment_id: { get_input: mongodb_application_deployment_id }

    f_env:
      type: fabric_env
      properties:
        env:
          user: { get_attribute: [ nodejs_host_deployment_proxy, common_public_key_user ] }
          key:  { get_attribute: [ nodejs_host_deployment_proxy, common_private_key ] }
          host_string: { get_attribute: [ nodejs_host_deployment_proxy, nodejs_public_ip] }
          port: { get_attribute: [ nodejs_host_deployment_proxy, nodejs_ssh_translated_port] }
          connection_attempts: 10
          timeout: 90

    nodejs:
      type: agentless.nodes.NodeJSServer
      relationships:
        - target: nodejs_host_deployment_proxy
          type: cloudify.relationships.contained_in
      interfaces:
        cloudify.interfaces.lifecycle:
          start:
            inputs:
              fabric_env: { get_property: [ f_env, env ]}
      relationships:
        - type: cloudify.relationships.depends_on
          target: nodejs_host_deployment_proxy


    nodecellar:
      type: agentless.nodes.nodecellar
      properties:
          port: 8080
      interfaces:
        cloudify.interfaces.lifecycle:
          start:
            inputs:
              MONGO_HOST: { get_attribute: [ mongodb_application_deployment_proxy, mongodb_internal_ip ] }
              fabric_env: { get_property: [ f_env, env ]}
          stop:
            inputs:
              MONGO_HOST: { get_attribute: [ mongodb_application_deployment_proxy, mongodb_internal_ip ] }
              fabric_env: { get_property: [ f_env, env ]}
      relationships:
        - type: cloudify.relationships.depends_on
          target: nodejs
        - type: cloudify.relationships.contained_in
          target: nodejs
        - type: cloudify.relationships.depends
          target: mongodb_application_deployment_proxy

outputs:
    nodejs_ip:
      value: { get_attribute: [ nodejs_host_deployment_proxy, nodejs_public_ip] }
    nodejs_port:
      value: 8080
